import GameController from '../../GameController';
import GamePlay from '../../GamePlay';
import GameStateService from '../../GameStateService';
import Swordsman from '../../characters/Swordsman';
import Daemon from '../../characters/Daemon';
import PositionedCharacter from '../../PositionedCharacter';
import { formatCharacterInfo } from '../../utils';

describe('GameController', () => {
  let gameController: GameController;
  let gamePlay: GamePlay;
  let stateService: GameStateService;

  beforeEach(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GamePlay
    gamePlay = new GamePlay();
    // –ú–æ–∫–∞–µ–º private cells —á–µ—Ä–µ–∑ Object.defineProperty
    Object.defineProperty(gamePlay, 'cells', {
      value: Array(64).fill({ title: '' }),
      writable: true,
    });
    // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç DOM
    gamePlay.showCellTooltip = jest.fn();
    gamePlay.hideCellTooltip = jest.fn();
    gamePlay.selectCell = jest.fn();
    gamePlay.deselectCell = jest.fn();
    gamePlay.setCursor = jest.fn();
    GamePlay.showError = jest.fn();

    // –ú–æ–∫–∞–µ–º storage –¥–ª—è GameStateService
    const storageMock = {
      getItem: jest.fn(),
      setItem: jest.fn(),
    } as unknown as Storage;
    stateService = new GameStateService(storageMock);
    gameController = new GameController(gamePlay, stateService);
  });

  test('onCellEnter –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å tooltip —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
    const swordsman = new Swordsman(1);
    const positionedCharacter = new PositionedCharacter(swordsman, 8);
    Object.defineProperty(gameController, 'playerTeam', {
      value: [positionedCharacter],
      writable: true,
    });

    gameController.onCellEnter(8);

    expect(gamePlay.showCellTooltip).toHaveBeenCalledWith(
      formatCharacterInfo`üéñ${swordsman.getLevel()} ‚öî${swordsman.getAttack()} üõ°${swordsman.getDefence()} ‚ù§${swordsman.health}`,
      8
    );
  });

  test('onCellEnter –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å tooltip –¥–ª—è –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏', () => {
    gameController.onCellEnter(0);
    expect(gamePlay.showCellTooltip).not.toHaveBeenCalled();
  });

  test('onCellLeave –¥–æ–ª–∂–µ–Ω —É–±–∏—Ä–∞—Ç—å tooltip', () => {
    gameController.onCellLeave(8);
    expect(gamePlay.hideCellTooltip).toHaveBeenCalledWith(8);
  });

  test('onCellClick –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –∏ –≤—ã–¥–µ–ª—è—Ç—å —è—á–µ–π–∫—É', () => {
    const swordsman = new Swordsman(1);
    const positionedCharacter = new PositionedCharacter(swordsman, 8);
    Object.defineProperty(gameController, 'playerTeam', {
      value: [positionedCharacter],
      writable: true,
    });

    gameController.onCellClick(8);

    expect(gamePlay.selectCell).toHaveBeenCalledWith(8);
    expect(gamePlay.setCursor).toHaveBeenCalledWith('pointer');
    expect(GamePlay.showError).not.toHaveBeenCalled();
    expect(gamePlay.deselectCell).not.toHaveBeenCalled();
  });

  test('onCellClick –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –≤—Ä–∞–≥–∞', () => {
    const daemon = new Daemon(1);
    const positionedCharacter = new PositionedCharacter(daemon, 8);
    Object.defineProperty(gameController, 'enemyTeam', {
      value: [positionedCharacter],
      writable: true,
    });

    gameController.onCellClick(8);

    expect(GamePlay.showError).toHaveBeenCalledWith(
      '–≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ.'
    );
    expect(gamePlay.selectCell).not.toHaveBeenCalled();
    expect(gamePlay.setCursor).not.toHaveBeenCalled();
    expect(gamePlay.deselectCell).not.toHaveBeenCalled();
  });

  test('onCellClick –¥–æ–ª–∂–µ–Ω —Å–Ω–∏–º–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É', () => {
    const swordsman = new Swordsman(1);
    const positionedCharacter = new PositionedCharacter(swordsman, 8);
    Object.defineProperty(gameController, 'playerTeam', {
      value: [positionedCharacter],
      writable: true,
    });
    Object.defineProperty(gameController, 'selectedCharacter', {
      value: positionedCharacter,
      writable: true,
    });

    gameController.onCellClick(0); // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞

    expect(gamePlay.deselectCell).toHaveBeenCalledWith(8);
    expect(gamePlay.setCursor).toHaveBeenCalledWith('auto');
    expect(gamePlay.selectCell).not.toHaveBeenCalled();
    expect(GamePlay.showError).not.toHaveBeenCalled();
  });

  test('onCellClick –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
    const swordsman1 = new Swordsman(1);
    const swordsman2 = new Swordsman(1);
    const positionedChar1 = new PositionedCharacter(swordsman1, 8);
    const positionedChar2 = new PositionedCharacter(swordsman2, 16);
    Object.defineProperty(gameController, 'playerTeam', {
      value: [positionedChar1, positionedChar2],
      writable: true,
    });
    Object.defineProperty(gameController, 'selectedCharacter', {
      value: positionedChar1,
      writable: true,
    });

    gameController.onCellClick(16); // –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

    expect(gamePlay.deselectCell).toHaveBeenCalledWith(8);
    expect(gamePlay.selectCell).toHaveBeenCalledWith(16);
    expect(gamePlay.setCursor).toHaveBeenCalledWith('pointer');
    expect(GamePlay.showError).not.toHaveBeenCalled();
  });
});
