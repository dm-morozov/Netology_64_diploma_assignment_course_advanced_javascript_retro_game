// src/ts/__tests__/node/GameController.test.ts
import GameController from '../../GameController';
import GamePlay from '../../GamePlay';
import GameStateService from '../../GameStateService';
import PositionedCharacter from '../../PositionedCharacter';
import Swordsman from '../../characters/Swordsman';
import Bowman from '../../characters/Bowman';
import Magician from '../../characters/Magician';
import Undead from '../../characters/Undead';
import Vampire from '../../characters/Vampire';
import Daemon from '../../characters/Daemon';
import cursors from '../../cursors';
import { formatCharacterInfo } from '../../utils';

describe('GameController', () => {
  let gameController: GameController;
  let gamePlay: GamePlay;
  let stateService: GameStateService;
  let showErrorSpy: jest.SpyInstance;
  let showMessageSpy: jest.SpyInstance;
  let saveGameCallback: () => void;
  let loadGameCallback: () => void;

  beforeEach(() => {
    // –ú–æ–∫–∏ –º–µ—Ç–æ–¥–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GamePlay
    gamePlay = {
      addCellEnterListener: jest.fn(),
      addCellLeaveListener: jest.fn(),
      addCellClickListener: jest.fn(),
      drawUi: jest.fn(),
      redrawPositions: jest.fn(),
      selectCell: jest.fn(),
      deselectCell: jest.fn(),
      showCellTooltip: jest.fn(),
      hideCellTooltip: jest.fn(),
      setCursor: jest.fn(),
      showError: jest.fn(),
      showDamage: jest.fn().mockResolvedValue(undefined),
      addNewGameListener: jest.fn(),
      addSaveGameListener: jest.fn((callback) => (saveGameCallback = callback)),
      addLoadGameListener: jest.fn((callback) => (loadGameCallback = callback)),
      blockGame: jest.fn(),
      unblockGame: jest.fn(),
    } as unknown as GamePlay;

    // –ú–æ–∫–∏ –¥–ª—è stateService, –≤–∫–ª—é—á–∞—è storage
    stateService = {
      load: jest.fn().mockReturnValue({}),
      save: jest.fn(),
      storage: {
        getItem: jest.fn().mockReturnValue(null),
        setItem: jest.fn(),
      },
    } as unknown as GameStateService;

    // –ü–æ–¥–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã GamePlay
    showErrorSpy = jest
      .spyOn(GamePlay, 'showError')
      .mockImplementation(() => {});
    showMessageSpy = jest
      .spyOn(GamePlay, 'showMessage')
      .mockImplementation(() => {});

    gameController = new GameController(gamePlay, stateService);
    gameController.init();
  });

  afterEach(() => {
    showErrorSpy.mockRestore();
    showMessageSpy.mockRestore();
    jest.clearAllMocks();
  });

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π', () => {
    expect(gamePlay.drawUi).toHaveBeenCalledWith(expect.any(String));
    expect(gamePlay.addCellEnterListener).toHaveBeenCalled();
    expect(gamePlay.addCellLeaveListener).toHaveBeenCalled();
    expect(gamePlay.addCellClickListener).toHaveBeenCalled();
    expect(gamePlay.addNewGameListener).toHaveBeenCalled();
    expect(gamePlay.addSaveGameListener).toHaveBeenCalled();
    expect(gamePlay.addLoadGameListener).toHaveBeenCalled();
    expect(gamePlay.redrawPositions).toHaveBeenCalledWith(expect.any(Array));
    expect(stateService.storage.getItem).toHaveBeenCalledWith('GameScore');
  });

  describe('getMoveRange', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Swordsman', () => {
      const character = new PositionedCharacter(new Swordsman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getMoveRange(character)).toBe(4);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Bowman', () => {
      const character = new PositionedCharacter(new Bowman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getMoveRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Magician', () => {
      const character = new PositionedCharacter(new Magician(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getMoveRange(character)).toBe(1);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Undead', () => {
      const character = new PositionedCharacter(new Undead(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getMoveRange(character)).toBe(4);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Vampire', () => {
      const character = new PositionedCharacter(new Vampire(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getMoveRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Daemon', () => {
      const character = new PositionedCharacter(new Daemon(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getMoveRange(character)).toBe(1);
    });
  });

  describe('getAttackRange', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Swordsman', () => {
      const character = new PositionedCharacter(new Swordsman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getAttackRange(character)).toBe(1);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Bowman', () => {
      const character = new PositionedCharacter(new Bowman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getAttackRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Magician', () => {
      const character = new PositionedCharacter(new Magician(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getAttackRange(character)).toBe(4);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Undead', () => {
      const character = new PositionedCharacter(new Undead(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getAttackRange(character)).toBe(1);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Vampire', () => {
      const character = new PositionedCharacter(new Vampire(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getAttackRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Daemon', () => {
      const character = new PositionedCharacter(new Daemon(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      expect(gameController.getAttackRange(character)).toBe(4);
    });
  });

  describe('onCellEnter', () => {
    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É–ª—Ç–∏–ø –∏ pointer –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ', () => {
      const character = new PositionedCharacter(new Swordsman(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      gameController.onCellEnter(10);
      expect(gamePlay.showCellTooltip).toHaveBeenCalledWith(
        formatCharacterInfo`üéñ${character.character.getLevel()} ‚öî${character.character.getAttack()} üõ°${character.character.getDefence()} ‚ù§${character.character.health}`,
        10
      );
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É–ª—Ç–∏–ø –∏ not-allowed –¥–ª—è –≤—Ä–∞–≥–∞ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
      const character = new PositionedCharacter(new Vampire(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [character];
      gameController.onCellEnter(10);
      expect(gamePlay.showCellTooltip).toHaveBeenCalledWith(
        formatCharacterInfo`üéñ${character.character.getLevel()} ‚öî${character.character.getAttack()} üõ°${character.character.getDefence()} ‚ù§${character.character.health}`,
        10
      );
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.notallowed);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–º –∏ pointer –¥–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Swordsman)', () => {
      const character = new PositionedCharacter(new Swordsman(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = character;
      gameController.onCellEnter(18);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(18, 'green');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–º –∏ pointer –¥–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Bowman)', () => {
      const character = new PositionedCharacter(new Bowman(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = character;
      gameController.onCellEnter(26);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(26, 'green');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–º –∏ pointer –¥–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Magician)', () => {
      const character = new PositionedCharacter(new Magician(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = character;
      gameController.onCellEnter(26);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(26, 'green');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º –∏ crosshair –¥–ª—è –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ (Swordsman)', () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      const enemy = new PositionedCharacter(new Vampire(1), 1);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = player;
      gameController.onCellEnter(1);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(1, 'red');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.crosshair);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º –∏ crosshair –¥–ª—è –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ (Bowman)', () => {
      const player = new PositionedCharacter(new Bowman(1), 27);
      const enemy = new PositionedCharacter(new Vampire(1), 18);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = player;
      gameController.onCellEnter(18);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(18, 'red');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.crosshair);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º –∏ crosshair –¥–ª—è –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ (Magician)', () => {
      const player = new PositionedCharacter(new Magician(1), 27);
      const enemy = new PositionedCharacter(new Vampire(1), 18);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = player;
      gameController.onCellEnter(18);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(18, 'red');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.crosshair);
    });

    test('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç not-allowed –¥–ª—è –≤—Ä–∞–≥–∞ –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞ –∞—Ç–∞–∫–∏ (Swordsman)', () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      const enemy = new PositionedCharacter(new Vampire(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = player;
      gameController.onCellEnter(10);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.notallowed);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç not-allowed –¥–ª—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Bowman)', () => {
      const character = new PositionedCharacter(new Bowman(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = character;
      gameController.onCellEnter(63);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.notallowed);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç auto –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
      gameController.onCellEnter(20);
      expect(gamePlay.showCellTooltip).not.toHaveBeenCalled();
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.auto);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });
  });

  describe('onCellClick', () => {
    test('–≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ', () => {
      const character = new PositionedCharacter(new Swordsman(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      gameController.onCellClick(10);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(10);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
      expect(gameController.selectedCharacter).toBe(character);
      expect(showErrorSpy).not.toHaveBeenCalled();
    });

    test('—Å–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞', () => {
      const character1 = new PositionedCharacter(new Swordsman(1), 10);
      const character2 = new PositionedCharacter(new Bowman(1), 11);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character1, character2];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = character1;
      gameController.onCellClick(11);
      expect(gamePlay.deselectCell).toHaveBeenCalledWith(10);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(11);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
      expect(gameController.selectedCharacter).toBe(character2);
      expect(showErrorSpy).not.toHaveBeenCalled();
    });

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –≤—Ä–∞–≥–∞', () => {
      const character = new PositionedCharacter(new Vampire(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [character];
      gameController.onCellClick(10);
      expect(showErrorSpy).toHaveBeenCalledWith(
        '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
      );
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
      expect(gamePlay.setCursor).not.toHaveBeenCalledWith(cursors.pointer);
      expect(gamePlay.deselectCell).not.toHaveBeenCalled();
    });

    test('–∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—É—é –∫–ª–µ—Ç–∫—É –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ö–æ–¥ –≤—Ä–∞–≥–∞', async () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      const enemy = new PositionedCharacter(new Vampire(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = player;
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'player';
      await gameController.onCellClick(8);
      expect(player.position).toBe(8);
      expect(gamePlay.redrawPositions).toHaveBeenCalledTimes(3);
    });

    test('–∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏', async () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      const enemy = new PositionedCharacter(new Vampire(1), 1);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = player;
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'player';
      await gameController.onCellClick(1);
      expect(gamePlay.showDamage).toHaveBeenCalled();
      expect(enemy.character.health).toBeLessThan(100);
    });
  });

  describe('onCellLeave', () => {
    test('—É–±–∏—Ä–∞–µ—Ç —Ç—É–ª—Ç–∏–ø –∏ —Å–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ', () => {
      const character = new PositionedCharacter(new Swordsman(1), 8);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = character;
      gameController.onCellLeave(9);
      expect(gamePlay.hideCellTooltip).toHaveBeenCalledWith(9);
      expect(gamePlay.deselectCell).toHaveBeenCalledWith(9);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.auto);
    });

    test('–Ω–µ —Å–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
      const character = new PositionedCharacter(new Swordsman(1), 8);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = character;
      gameController.onCellLeave(8);
      expect(gamePlay.hideCellTooltip).toHaveBeenCalledWith(8);
      expect(gamePlay.deselectCell).not.toHaveBeenCalled();
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.auto);
    });
  });

  describe('handleGameOver', () => {
    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ, –µ—Å–ª–∏ –≤—Ä–∞–≥–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã', async () => {
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [
        new PositionedCharacter(new Swordsman(1), 0),
      ];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'player';
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      await gameController.handleGameOver();
      expect(showMessageSpy).toHaveBeenCalledWith('–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: 100!');
      expect(showMessageSpy).toHaveBeenCalledWith(
        '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–∞—à —Å—á–µ—Ç: 100. –†–µ–∫–æ—Ä–¥: 100.'
      );
      expect(gamePlay.blockGame).toHaveBeenCalled();
    });

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥—ë–Ω', async () => {
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [new PositionedCharacter(new Vampire(1), 10)];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'player';
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      await gameController.handleGameOver();
      expect(showMessageSpy).toHaveBeenCalledWith(
        '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–∞—à —Å—á–µ—Ç: 0. –†–µ–∫–æ—Ä–¥: 0.'
      );
      expect(gamePlay.blockGame).toHaveBeenCalled();
    });
  });

  describe('score handling', () => {
    test('—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç maxScore –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã', async () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.selectedCharacter = player;
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'player';
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.maxScore = 0;
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      await gameController.handleGameOver();
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
      expect(gameController.maxScore).toBeGreaterThan(0);
    });
  });

  describe('startNewLevel', () => {
    test('–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2 —Å —Ç–µ–º–æ–π prairie', async () => {
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [
        new PositionedCharacter(new Swordsman(1), 0),
      ];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'player';
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      await gameController.startNewLevel();
      expect(gamePlay.drawUi).toHaveBeenCalledWith('prairie');
      expect(gamePlay.redrawPositions).toHaveBeenCalledWith(expect.any(Array));
    });
  });

  describe('saveGameState and loadGameState', () => {
    test('—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã', async () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [new PositionedCharacter(new Vampire(1), 10)];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'player';
      saveGameCallback(); // –í—ã–∑—ã–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      expect(stateService.save).toHaveBeenCalled();
      expect(showMessageSpy).toHaveBeenCalledWith('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');

      (stateService.load as jest.Mock).mockReturnValue({
        level: 1,
        maxScore: 100,
        playerTeamData: [
          {
            character: {
              type: 'swordsman',
              level: 1,
              health: 100,
              attack: 40,
              defence: 10,
            },
            position: 0,
          },
        ],
        enemyTeamData: [
          {
            character: {
              type: 'vampire',
              level: 1,
              health: 100,
              attack: 25,
              defence: 25,
            },
            position: 10,
          },
        ],
      });
      loadGameCallback(); // –í—ã–∑—ã–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      expect(gamePlay.redrawPositions).toHaveBeenCalled();
      expect(gamePlay.unblockGame).toHaveBeenCalled();
      expect(showMessageSpy).toHaveBeenCalledWith('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
    });
  });

  describe('makeEnemyTurn', () => {
    test('–≤—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏', async () => {
      const player = new PositionedCharacter(new Swordsman(1), 1);
      const enemy = new PositionedCharacter(new Vampire(1), 0);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è
      gameController.activePlayer = 'enemy'; // –•–æ–¥ –≤—Ä–∞–≥–∞
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      await gameController.makeEnemyTurn();
      expect(gamePlay.showDamage).toHaveBeenCalled();
      expect(player.character.health).toBeLessThan(100);
    });
  });
});
