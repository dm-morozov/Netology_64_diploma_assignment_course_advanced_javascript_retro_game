import GameController from '../../GameController';
import GamePlay from '../../GamePlay';
import GameStateService from '../../GameStateService';
import PositionedCharacter from '../../PositionedCharacter';
import Swordsman from '../../characters/Swordsman';
import Bowman from '../../characters/Bowman';
import Magician from '../../characters/Magician';
import Undead from '../../characters/Undead';
import Vampire from '../../characters/Vampire';
import Daemon from '../../characters/Daemon';
import cursors from '../../cursors';
import { formatCharacterInfo } from '../../utils';

describe('GameController', () => {
  let gameController: GameController;
  let gamePlay: GamePlay;
  let stateService: GameStateService;
  let showErrorSpy: jest.SpyInstance;

  beforeEach(() => {
    // –º–æ–∫–∏ –º–µ—Ç–æ–¥–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GamePlay
    gamePlay = {
      addCellEnterListener: jest.fn(),
      addCellLeaveListener: jest.fn(),
      addCellClickListener: jest.fn(),
      drawUi: jest.fn(),
      redrawPositions: jest.fn(),
      selectCell: jest.fn(),
      deselectCell: jest.fn(),
      showCellTooltip: jest.fn(),
      hideCellTooltip: jest.fn(),
      setCursor: jest.fn(),
      showError: jest.fn(),
      showDamage: jest.fn().mockResolvedValue(undefined), // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è showDamage
    } as unknown as GamePlay;

    // –º–æ–∫–∏ –¥–ª—è stateService
    stateService = {
      load: jest.fn(),
      save: jest.fn(),
    } as unknown as GameStateService;

    // –ø–æ–¥–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ showError –∫–ª–∞—Å—Å–∞ GamePlay –Ω–∞ —à–ø–∏–æ–Ω
    showErrorSpy = jest
      .spyOn(GamePlay, 'showError')
      .mockImplementation(() => {});

    gameController = new GameController(gamePlay, stateService);
    gameController.init();
  });

  afterEach(() => {
    // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —á–∏—Å—Ç–∏–º –≤—Å–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏
    showErrorSpy.mockRestore();
    jest.clearAllMocks();
  });

  test('–¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π', () => {
    // drawUi –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ç–µ–º–æ–π
    expect(gamePlay.drawUi).toHaveBeenCalledWith(expect.any(String));
    expect(gamePlay.addCellEnterListener).toHaveBeenCalled();
    expect(gamePlay.addCellLeaveListener).toHaveBeenCalled();
    expect(gamePlay.addCellClickListener).toHaveBeenCalled();
    expect(gamePlay.redrawPositions).toHaveBeenCalledWith(expect.any(Array));
  });

  describe('getMoveRange', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Swordsman', () => {
      const character = new PositionedCharacter(new Swordsman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getMoveRange(character)).toBe(4);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Bowman', () => {
      const character = new PositionedCharacter(new Bowman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getMoveRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Magician', () => {
      const character = new PositionedCharacter(new Magician(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getMoveRange(character)).toBe(1);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Undead', () => {
      const character = new PositionedCharacter(new Undead(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getMoveRange(character)).toBe(4);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Vampire', () => {
      const character = new PositionedCharacter(new Vampire(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getMoveRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Daemon', () => {
      const character = new PositionedCharacter(new Daemon(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getMoveRange(character)).toBe(1);
    });
  });

  describe('getAttackRange', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Swordsman', () => {
      const character = new PositionedCharacter(new Swordsman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getAttackRange(character)).toBe(1);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Bowman', () => {
      const character = new PositionedCharacter(new Bowman(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getAttackRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Magician', () => {
      const character = new PositionedCharacter(new Magician(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getAttackRange(character)).toBe(4);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 –¥–ª—è Undead', () => {
      const character = new PositionedCharacter(new Undead(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getAttackRange(character)).toBe(1);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –¥–ª—è Vampire', () => {
      const character = new PositionedCharacter(new Vampire(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getAttackRange(character)).toBe(2);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 4 –¥–ª—è Daemon', () => {
      const character = new PositionedCharacter(new Daemon(1), 0);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ç–µ—Å—Ç–µ
      expect(gameController.getAttackRange(character)).toBe(4);
    });
  });

  describe('onCellEnter', () => {
    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É–ª—Ç–∏–ø –∏ pointer –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ', () => {
      const character = new PositionedCharacter(new Swordsman(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      gameController.onCellEnter(10);
      expect(gamePlay.showCellTooltip).toHaveBeenCalledWith(
        formatCharacterInfo`üéñ${character.character.getLevel()} ‚öî${character.character.getAttack()} üõ°${character.character.getDefence()} ‚ù§${character.character.health}`,
        10
      );
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É–ª—Ç–∏–ø –∏ not-allowed –¥–ª—è –≤—Ä–∞–≥–∞ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
      const character = new PositionedCharacter(new Vampire(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.enemyTeam = [character];
      gameController.onCellEnter(10);
      expect(gamePlay.showCellTooltip).toHaveBeenCalledWith(
        formatCharacterInfo`üéñ${character.character.getLevel()} ‚öî${character.character.getAttack()} üõ°${character.character.getDefence()} ‚ù§${character.character.health}`,
        10
      );
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.notallowed);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–º –∏ pointer –¥–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Swordsman)', () => {
      const character = new PositionedCharacter(new Swordsman(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = character;
      gameController.onCellEnter(18); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 3 (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 4)
      expect(gamePlay.selectCell).toHaveBeenCalledWith(18, 'green');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–º –∏ pointer –¥–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Bowman)', () => {
      const character = new PositionedCharacter(new Bowman(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = character;
      gameController.onCellEnter(26); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1 (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2)
      expect(gamePlay.selectCell).toHaveBeenCalledWith(26, 'green');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–º –∏ pointer –¥–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Magician)', () => {
      const character = new PositionedCharacter(new Magician(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = character;
      gameController.onCellEnter(26); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1 (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1)
      expect(gamePlay.selectCell).toHaveBeenCalledWith(26, 'green');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º –∏ crosshair –¥–ª—è –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ (Swordsman)', () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      const enemy = new PositionedCharacter(new Vampire(1), 1); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = player;
      gameController.onCellEnter(1);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(1, 'red');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.crosshair);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º –∏ crosshair –¥–ª—è –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ (Bowman)', () => {
      const player = new PositionedCharacter(new Bowman(1), 27);
      const enemy = new PositionedCharacter(new Vampire(1), 18); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 2
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = player;
      gameController.onCellEnter(18);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(18, 'red');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.crosshair);
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º –∏ crosshair –¥–ª—è –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ (Magician)', () => {
      const player = new PositionedCharacter(new Magician(1), 27);
      const enemy = new PositionedCharacter(new Vampire(1), 18); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 3
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = player;
      gameController.onCellEnter(18);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(18, 'red');
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.crosshair);
    });

    test('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç not-allowed –¥–ª—è –≤—Ä–∞–≥–∞ –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞ –∞—Ç–∞–∫–∏ (Swordsman)', () => {
      const player = new PositionedCharacter(new Swordsman(1), 0);
      const enemy = new PositionedCharacter(new Vampire(1), 10); // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ > 1
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [player];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.enemyTeam = [enemy];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = player;
      gameController.onCellEnter(10);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.notallowed);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç not-allowed –¥–ª—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è (Bowman)', () => {
      const character = new PositionedCharacter(new Bowman(1), 27);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = character;
      gameController.onCellEnter(63); // –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞ 2
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.notallowed);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });

    test('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç auto –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
      gameController.onCellEnter(20);
      expect(gamePlay.showCellTooltip).not.toHaveBeenCalled();
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.auto);
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
    });
  });

  describe('onCellClick', () => {
    test('–≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ', () => {
      const character = new PositionedCharacter(new Swordsman(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      gameController.onCellClick(10);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(10);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
      expect(gameController.selectedCharacter).toBe(character);
      expect(GamePlay.showError).not.toHaveBeenCalled();
    });

    test('—Å–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞', () => {
      const character1 = new PositionedCharacter(new Swordsman(1), 10);
      const character2 = new PositionedCharacter(new Bowman(1), 11);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character1, character2];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = character1;
      gameController.onCellClick(11);
      expect(gamePlay.deselectCell).toHaveBeenCalledWith(10);
      expect(gamePlay.selectCell).toHaveBeenCalledWith(11);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.pointer);
      // @ts-expect-error: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
      expect(gameController.selectedCharacter).toBe(character2);
      expect(GamePlay.showError).not.toHaveBeenCalled();
    });

    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –≤—Ä–∞–≥–∞', () => {
      const character = new PositionedCharacter(new Vampire(1), 10);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.enemyTeam = [character];
      gameController.onCellClick(10);
      expect(GamePlay.showError).toHaveBeenCalledWith(
        '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
      );
      expect(gamePlay.selectCell).not.toHaveBeenCalled();
      expect(gamePlay.setCursor).not.toHaveBeenCalledWith(cursors.pointer);
      expect(gamePlay.deselectCell).not.toHaveBeenCalled();
    });
  });

  describe('onCellLeave', () => {
    test('—É–±–∏—Ä–∞–µ—Ç —Ç—É–ª—Ç–∏–ø –∏ —Å–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ', () => {
      const character = new PositionedCharacter(new Swordsman(1), 8);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = character;
      gameController.onCellLeave(9); // –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
      expect(gamePlay.hideCellTooltip).toHaveBeenCalledWith(9);
      expect(gamePlay.deselectCell).toHaveBeenCalledWith(9);
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.auto);
    });

    test('–Ω–µ —Å–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
      const character = new PositionedCharacter(new Swordsman(1), 8);
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.playerTeam = [character];
      // @ts-expect-error: –ø–æ–¥–º–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
      gameController.selectedCharacter = character;
      gameController.onCellLeave(8); // –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
      expect(gamePlay.hideCellTooltip).toHaveBeenCalledWith(8);
      expect(gamePlay.deselectCell).not.toHaveBeenCalled();
      expect(gamePlay.setCursor).toHaveBeenCalledWith(cursors.auto);
    });
  });
});
