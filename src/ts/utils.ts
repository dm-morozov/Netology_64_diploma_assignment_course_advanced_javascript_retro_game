// src/ts/utils.ts

/**
 * @todo
 * @param index - –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è
 * @param boardSize - —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è (–≤ –¥–ª–∏–Ω—É –∏–ª–∏ —à–∏—Ä–∏–Ω—É)
 * @returns —Å—Ç—Ä–æ–∫–∞ - —Ç–∏–ø —è—á–µ–π–∫–∏ –Ω–∞ –ø–æ–ª–µ:
 *
 * top-left
 * top-right
 * top
 * bottom-left
 * bottom-right
 * bottom
 * right
 * left
 * center
 *
 * @example
 * ```js
 * calcTileType(0, 8); // 'top-left'
 * calcTileType(1, 8); // 'top'
 * calcTileType(63, 8); // 'bottom-right'
 * calcTileType(7, 7); // 'left'
 * ```
 * */
export function calcTileType(index: number, boardSize: number): string {
  // TODO: –≤–∞—à –∫–æ–¥ –±—É–¥–µ—Ç —Ç—É—Ç
  // console.log(index, boardSize); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
  const row = Math.floor(index / boardSize);
  // console.log(row); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  // –ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞
  const col = index % boardSize;
  // console.log(col); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  // –£–≥–ª—ã
  if (row === 0 && col === 0) return 'top-left';
  if (row === 0 && col === boardSize - 1) return 'top-right';
  if (row === boardSize - 1 && col === boardSize - 1) return 'bottom-right';
  if (row === boardSize - 1 && col === 0) return 'bottom-left';
  // –ö—Ä–∞—è
  if (row === 0) return 'top';
  if (row === boardSize - 1) return 'bottom';
  if (col === 0) return 'left';
  if (col === boardSize - 1) return 'right';
  // –¶–µ–Ω—Ç—Ä
  return 'center';
}

export function calcHealthLevel(health: number): string {
  if (health < 15) {
    return 'critical';
  }

  if (health < 50) {
    return 'normal';
  }

  return 'high';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞
 * @param strings - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–∑ —à–∞–±–ª–æ–Ω–∞
 * @param level - —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @param attack - –∞—Ç–∞–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @param defence - –∑–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @param health - –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @returns —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "üéñ1 ‚öî10 üõ°40 ‚ù§50"
 */
export function formatCharacterInfo(
  strings: TemplateStringsArray,
  level: number,
  attack: number,
  defence: number,
  health: number
): string {
  return `${strings[0]}${level} ${strings[1].trim()}${attack} ${strings[2].trim()}${defence} ${strings[3].trim()}${health}`;
}
