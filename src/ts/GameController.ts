import themes from './themes';
import GamePlay from './GamePlay';
import GameStateService from './GameStateService';
import Swordsman from './characters/Swordsman';
import PositionedCharacter from './PositionedCharacter';
import Bowman from './characters/Bowman';
import Magician from './characters/Magician';
import Daemon from './characters/Daemon';
import Undead from './characters/Undead';
import Vampire from './characters/Vampire';
import { generateTeam, generatePositions } from './generators';
import { formatCharacterInfo, calcMoveRange } from './utils';
import cursors from './cursors';

/**
 * GameController - –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û–Ω —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Ü–∏—é GamePlay –∏ GameStateService,
 * –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
 * –∫ GamePlay –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫–∏/–Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —è—á–µ–π–∫–∏
 */

export default class GameController {
  private gamePlay: GamePlay;
  private stateService: GameStateService;
  private playerTeam: PositionedCharacter[];
  private enemyTeam: PositionedCharacter[];
  // –ù–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω (null),
  // –∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç PositionedCharacter
  private selectedCharacter: PositionedCharacter | null = null;

  constructor(gamePlay: GamePlay, stateService: GameStateService) {
    console.log('GameController: Constructor called');
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.playerTeam = [];
    this.enemyTeam = [];
  }

  init() {
    console.log('GameController: Starting init with theme: prairie');
    // TODO: add event listeners to gamePlay events
    // TODO: –¥–æ–±–∞–≤—å—Ç–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π gamePlay
    this.gamePlay.drawUi(themes.prairie);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    this.gamePlay.addCellEnterListener((index: number) =>
      this.onCellEnter(index)
    );
    this.gamePlay.addCellLeaveListener((index: number) =>
      this.onCellLeave(index)
    );

    this.gamePlay.addCellClickListener((index: number) =>
      this.onCellClick(index)
    );

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    const playerTypes = [Swordsman, Bowman, Magician];
    const enemyTypes = [Daemon, Undead, Vampire];
    const playerTeam = generateTeam(playerTypes, 1, 2);
    const enemyTeam = generateTeam(enemyTypes, 1, 2);

    // –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ (—Å—Ç–æ–ª–±—Ü—ã 1 –∏ 2: 0, 1, 8, 9, 16, 17, ...),
    // –î—É–º–∞–µ–º –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å))
    const playerPositions = [];
    for (let row = 0; row < 8; row++) {
      playerPositions.push(row * 8, row * 8 + 1);
    }
    console.log(playerPositions);

    // –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Ä–∞–≥–∞ (—Å—Ç–æ–ª–±—Ü—ã 7 –∏ 8: 6, 7, 14, 15, 22, 23, ...)
    const enemyPositions = [];
    for (let row = 0; row < 8; row++) {
      enemyPositions.push(row * 8 + 6, row * 8 + 7);
    }
    console.log(enemyPositions);

    // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    this.playerTeam = generatePositions(
      playerTeam.getCharacters(),
      playerPositions
    );

    this.enemyTeam = generatePositions(
      enemyTeam.getCharacters(),
      enemyPositions
    );

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞
    this.gamePlay.redrawPositions([...this.playerTeam, ...this.enemyTeam]);
    console.log('GameController: UI drawn');

    // TODO: load saved stated from stateService
    // TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ stateService

    // –¢–µ—Å—Ç: —Å–æ–∑–¥–∞—ë–º Swordsman –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –ø–æ–ª–µ
    // const swordsman = new Swordsman(1);
    // const positionedSwordsman = new PositionedCharacter(swordsman, 0); // –ü–æ–∑–∏—Ü–∏—è 0 (–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª)
    // this.gamePlay.redrawPositions([positionedSwordsman]); // –†–∏—Å—É–µ–º –Ω–∞ –ø–æ–ª–µ
  }

  private getMoveRange(character: PositionedCharacter): number {
    if (
      character.character instanceof Swordsman ||
      character.character instanceof Undead
    ) {
      return 4;
    }
    if (
      character.character instanceof Bowman ||
      character.character instanceof Vampire
    ) {
      return 2;
    }
    if (
      character.character instanceof Magician ||
      character.character instanceof Daemon
    ) {
      return 1;
    }
    return 0; // –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
  }

  private getAttackRange(character: PositionedCharacter): number {
    if (
      character.character instanceof Swordsman ||
      character.character instanceof Undead
    ) {
      return 1;
    }
    if (
      character.character instanceof Bowman ||
      character.character instanceof Vampire
    ) {
      return 2;
    }
    if (
      character.character instanceof Magician ||
      character.character instanceof Daemon
    ) {
      return 4;
    }
    return 0;
  }

  // –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è,
  // –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∫–ª–∏–∫–∞–µ—Ç –ø–æ —è—á–µ–π–∫–µ
  onCellClick(index: number) {
    // console.log('GameController: Cell clicked');
    const clickedCharacter = [...this.playerTeam, ...this.enemyTeam].find(
      (p) => p.position === index
    );
    if (clickedCharacter) {
      if (this.playerTeam.includes(clickedCharacter)) {
        // console.log('GameController: –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞');
        // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        if (this.selectedCharacter) {
          this.gamePlay.deselectCell(this.selectedCharacter.position);
        }
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.selectedCharacter = clickedCharacter;
        // –í—ã–¥–µ–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.gamePlay.selectCell(index);
        // –ú–µ–Ω—è–µ—Ç –∫—É—Ä—Å–æ—Ä –Ω–∞ pointer
        this.gamePlay.setCursor(cursors.pointer);
      } else {
        // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –≤—Ä–∞–≥–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        GamePlay.showError('–≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ.');
      }
    } else {
      if (this.selectedCharacter) {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ç—É–¥–∞ –ø–æ–π—Ç–∏

        // –î–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞
        const moveRange = this.getMoveRange(this.selectedCharacter);
        // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        const allowedMoves = calcMoveRange(
          this.selectedCharacter.position,
          moveRange
        );

        if (allowedMoves.includes(index)) {
          // –¢–æ–≥–¥–∞ –º—ã –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          const oldPosition = this.selectedCharacter.position; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
          this.selectedCharacter.position = index; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
          this.gamePlay.deselectCell(oldPosition); // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä–æ–π –∫–ª–µ—Ç–∫–∏
          this.selectedCharacter = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
          this.gamePlay.setCursor(cursors.auto); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
          this.gamePlay.redrawPositions([
            ...this.playerTeam,
            ...this.enemyTeam,
          ]); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ
        } else {
          // –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ–π—Ç–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          GamePlay.showError('–°—é–¥–∞ –ø–æ–π—Ç–∏ –Ω–µ–ª—å–∑—è');
        }
      }
    }
  }

  onCellEnter(index: number) {
    // TODO: show tooltip
    // TODO: –ø–æ–∫–∞–∑–∞—Ç—å tooltip
    const character = [...this.playerTeam, ...this.enemyTeam].find(
      (p) => p.position === index
    );
    if (character) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—É–ª—Ç–∏–ø —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
      const level = character.character.getLevel();
      const attack = character.character.getAttack();
      const defence = character.character.getDefence();
      const health = character.character.health;
      const message = formatCharacterInfo`üéñ${level} ‚öî${attack} üõ°${defence} ‚ù§${health}`;
      this.gamePlay.showCellTooltip(message, index);

      // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ
      if (this.selectedCharacter) {
        const attackRange = this.getAttackRange(this.selectedCharacter);
        const allowedAttacks = calcMoveRange(
          this.selectedCharacter.position,
          attackRange
        );
        if (
          this.enemyTeam.includes(character) &&
          allowedAttacks.includes(index)
        ) {
          this.gamePlay.selectCell(index, 'red');
          this.gamePlay.setCursor(cursors.crosshair);
        } else if (this.playerTeam.includes(character)) {
          this.gamePlay.setCursor(cursors.pointer);
        } else {
          this.gamePlay.setCursor(cursors.notallowed);
        }
      } else {
        if (this.playerTeam.includes(character)) {
          this.gamePlay.setCursor(cursors.pointer);
        } else {
          this.gamePlay.setCursor(cursors.notallowed);
        }
      }
    } else {
      if (this.selectedCharacter) {
        const moveRange = this.getMoveRange(this.selectedCharacter);
        const allowedMoves = calcMoveRange(
          this.selectedCharacter.position,
          moveRange
        );
        if (allowedMoves.includes(index)) {
          this.gamePlay.selectCell(index, 'green');
          this.gamePlay.setCursor(cursors.pointer);
        } else {
          this.gamePlay.setCursor(cursors.notallowed);
        }
      } else {
        this.gamePlay.setCursor(cursors.auto);
      }
    }
  }

  onCellLeave(index: number) {
    // TODO: hide tooltip
    // TODO: —É–±—Ä–∞—Ç—å tooltip
    this.gamePlay.hideCellTooltip(index);
    if (!this.selectedCharacter || this.selectedCharacter.position !== index) {
      this.gamePlay.deselectCell(index);
    }
    this.gamePlay.setCursor(cursors.auto);
  }
}
